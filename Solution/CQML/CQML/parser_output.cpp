#include "output0outer.h"

#include "qml_includes.h"
void _QML_Update();
void _QML_ClassTabsInit();
void _QML_Draw();
CQMLGUI::Element* root;

void _QML_Init()
{
	root = (CQMLGUI::Element*) CQMLGUI::acGUI_Rootoutput0();
	CQMLGUI::SetRoot(root);
	_QML_Update();
}

void _QML_Update()
{
	CQMLGUI::PreUpdate();
	root->Update();
	CQMLGUI::PostUpdate();
}

void _QML_Draw()
{
	CQMLGUI::PreDraw();
	root->Update();
	CQMLGUI::PostDraw();
}
// print default constructors;
using namespace CQMLGUI;
void InitHashTabs(ClassHashTable * hashTabs)
{
ClassHashTable * data;
InitClassesSize(hashTabs, 11);


 //PrintClassTabs()

data=&hashTabs[0];
InitHashTab(data,9,3);
data->keys[0]=(char *)malloc(sizeof(char) * 4);
strcpy(data->keys[0],"red");
data->keys[1]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[1],"green");
data->keys[2]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[2],"blue");

data->T1[0]=8;
data->T1[1]=7;
data->T1[2]=7;

data->T2[0]=2;
data->T2[1]=6;
data->T2[2]=5;

data->g[0]=0;
data->g[1]=0;
data->g[2]=0;
data->g[3]=0;
data->g[4]=0;
data->g[5]=2;
data->g[6]=0;
data->g[7]=1;
data->g[8]=0;


data=&hashTabs[1];
InitHashTab(data,15,5);
data->keys[0]=(char *)malloc(sizeof(char) * 8);
strcpy(data->keys[0],"capital");
data->keys[1]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[1],"italic");
data->keys[2]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[2],"bold");
data->keys[3]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[3],"size");
data->keys[4]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[4],"family");

data->T1[0]=6;
data->T1[1]=2;
data->T1[2]=7;
data->T1[3]=6;
data->T1[4]=8;

data->T2[0]=9;
data->T2[1]=3;
data->T2[2]=7;
data->T2[3]=11;
data->T2[4]=5;

data->g[0]=0;
data->g[1]=0;
data->g[2]=0;
data->g[3]=0;
data->g[4]=1;
data->g[5]=3;
data->g[6]=0;
data->g[7]=0;
data->g[8]=0;
data->g[9]=0;
data->g[10]=0;
data->g[11]=2;
data->g[12]=0;
data->g[13]=1;
data->g[14]=0;


data=&hashTabs[2];
InitHashTab(data,3,1);
data->keys[0]=(char *)malloc(sizeof(char) * 4);
strcpy(data->keys[0],"src");

data->T1[0]=0;

data->T2[0]=1;

data->g[0]=0;
data->g[1]=0;
data->g[2]=0;


data=&hashTabs[3];
InitHashTab(data,27,9);
data->keys[0]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[0],"root");
data->keys[1]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[1],"parent");
data->keys[2]=(char *)malloc(sizeof(char) * 9);
strcpy(data->keys[2],"children");
data->keys[3]=(char *)malloc(sizeof(char) * 14);
strcpy(data->keys[3],"childrenCount");
data->keys[4]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[4],"flags");
data->keys[5]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[5],"x");
data->keys[6]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[6],"y");
data->keys[7]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[7],"width");
data->keys[8]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[8],"height");

data->T1[0]=22;
data->T1[1]=13;
data->T1[2]=14;
data->T1[3]=14;
data->T1[4]=16;
data->T1[5]=21;
data->T1[6]=12;
data->T1[7]=0;
data->T1[8]=0;

data->T2[0]=5;
data->T2[1]=22;
data->T2[2]=18;
data->T2[3]=6;
data->T2[4]=14;
data->T2[5]=24;
data->T2[6]=11;
data->T2[7]=14;
data->T2[8]=1;

data->g[0]=0;
data->g[1]=0;
data->g[2]=0;
data->g[3]=0;
data->g[4]=3;
data->g[5]=0;
data->g[6]=0;
data->g[7]=0;
data->g[8]=0;
data->g[9]=0;
data->g[10]=0;
data->g[11]=0;
data->g[12]=2;
data->g[13]=8;
data->g[14]=0;
data->g[15]=0;
data->g[16]=6;
data->g[17]=0;
data->g[18]=0;
data->g[19]=1;
data->g[20]=0;
data->g[21]=5;
data->g[22]=0;
data->g[23]=1;
data->g[24]=0;
data->g[25]=0;
data->g[26]=4;


data=&hashTabs[4];
InitHashTab(data,36,12);
data->keys[0]=(char *)malloc(sizeof(char) * 12);
strcpy(data->keys[0],"borderColor");
data->keys[1]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[1],"border");
data->keys[2]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[2],"color");
data->keys[3]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[3],"root");
data->keys[4]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[4],"parent");
data->keys[5]=(char *)malloc(sizeof(char) * 9);
strcpy(data->keys[5],"children");
data->keys[6]=(char *)malloc(sizeof(char) * 14);
strcpy(data->keys[6],"childrenCount");
data->keys[7]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[7],"flags");
data->keys[8]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[8],"x");
data->keys[9]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[9],"y");
data->keys[10]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[10],"width");
data->keys[11]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[11],"height");

data->T1[0]=2;
data->T1[1]=29;
data->T1[2]=26;
data->T1[3]=33;
data->T1[4]=9;
data->T1[5]=31;
data->T1[6]=24;
data->T1[7]=9;
data->T1[8]=29;
data->T1[9]=17;
data->T1[10]=32;
data->T1[11]=6;

data->T2[0]=19;
data->T2[1]=10;
data->T2[2]=30;
data->T2[3]=17;
data->T2[4]=11;
data->T2[5]=30;
data->T2[6]=30;
data->T2[7]=2;
data->T2[8]=30;
data->T2[9]=17;
data->T2[10]=28;
data->T2[11]=33;

data->g[0]=0;
data->g[1]=0;
data->g[2]=0;
data->g[3]=0;
data->g[4]=0;
data->g[5]=0;
data->g[6]=10;
data->g[7]=0;
data->g[8]=0;
data->g[9]=9;
data->g[10]=6;
data->g[11]=0;
data->g[12]=4;
data->g[13]=0;
data->g[14]=0;
data->g[15]=0;
data->g[16]=0;
data->g[17]=5;
data->g[18]=0;
data->g[19]=5;
data->g[20]=0;
data->g[21]=0;
data->g[22]=0;
data->g[23]=7;
data->g[24]=4;
data->g[25]=0;
data->g[26]=0;
data->g[27]=1;
data->g[28]=0;
data->g[29]=0;
data->g[30]=0;
data->g[31]=9;
data->g[32]=7;
data->g[33]=0;
data->g[34]=0;
data->g[35]=0;


data=&hashTabs[5];
InitHashTab(data,27,9);
data->keys[0]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[0],"root");
data->keys[1]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[1],"parent");
data->keys[2]=(char *)malloc(sizeof(char) * 9);
strcpy(data->keys[2],"children");
data->keys[3]=(char *)malloc(sizeof(char) * 14);
strcpy(data->keys[3],"childrenCount");
data->keys[4]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[4],"flags");
data->keys[5]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[5],"x");
data->keys[6]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[6],"y");
data->keys[7]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[7],"width");
data->keys[8]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[8],"height");

data->T1[0]=21;
data->T1[1]=10;
data->T1[2]=8;
data->T1[3]=26;
data->T1[4]=3;
data->T1[5]=8;
data->T1[6]=26;
data->T1[7]=12;
data->T1[8]=7;

data->T2[0]=15;
data->T2[1]=6;
data->T2[2]=6;
data->T2[3]=8;
data->T2[4]=22;
data->T2[5]=10;
data->T2[6]=16;
data->T2[7]=16;
data->T2[8]=1;

data->g[0]=0;
data->g[1]=0;
data->g[2]=0;
data->g[3]=0;
data->g[4]=0;
data->g[5]=0;
data->g[6]=6;
data->g[7]=0;
data->g[8]=0;
data->g[9]=3;
data->g[10]=0;
data->g[11]=0;
data->g[12]=4;
data->g[13]=0;
data->g[14]=4;
data->g[15]=0;
data->g[16]=0;
data->g[17]=8;
data->g[18]=2;
data->g[19]=0;
data->g[20]=0;
data->g[21]=4;
data->g[22]=8;
data->g[23]=0;
data->g[24]=0;
data->g[25]=0;
data->g[26]=0;


data=&hashTabs[6];
InitHashTab(data,12,4);
data->keys[0]=(char *)malloc(sizeof(char) * 4);
strcpy(data->keys[0],"top");
data->keys[1]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[1],"bottom");
data->keys[2]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[2],"left");
data->keys[3]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[3],"right");

data->T1[0]=5;
data->T1[1]=1;
data->T1[2]=5;
data->T1[3]=2;

data->T2[0]=5;
data->T2[1]=2;
data->T2[2]=0;
data->T2[3]=10;

data->g[0]=0;
data->g[1]=0;
data->g[2]=1;
data->g[3]=0;
data->g[4]=3;
data->g[5]=0;
data->g[6]=2;
data->g[7]=0;
data->g[8]=0;
data->g[9]=0;
data->g[10]=0;
data->g[11]=0;


data=&hashTabs[7];
InitHashTab(data,45,15);
data->keys[0]=(char *)malloc(sizeof(char) * 11);
strcpy(data->keys[0],"text_color");
data->keys[1]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[1],"text");
data->keys[2]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[2],"font");
data->keys[3]=(char *)malloc(sizeof(char) * 12);
strcpy(data->keys[3],"borderColor");
data->keys[4]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[4],"border");
data->keys[5]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[5],"color");
data->keys[6]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[6],"root");
data->keys[7]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[7],"parent");
data->keys[8]=(char *)malloc(sizeof(char) * 9);
strcpy(data->keys[8],"children");
data->keys[9]=(char *)malloc(sizeof(char) * 14);
strcpy(data->keys[9],"childrenCount");
data->keys[10]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[10],"flags");
data->keys[11]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[11],"x");
data->keys[12]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[12],"y");
data->keys[13]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[13],"width");
data->keys[14]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[14],"height");

data->T1[0]=0;
data->T1[1]=42;
data->T1[2]=40;
data->T1[3]=39;
data->T1[4]=38;
data->T1[5]=10;
data->T1[6]=2;
data->T1[7]=31;
data->T1[8]=14;
data->T1[9]=6;
data->T1[10]=33;
data->T1[11]=3;
data->T1[12]=1;
data->T1[13]=-842150451;
data->T1[14]=-842150451;

data->T2[0]=11;
data->T2[1]=35;
data->T2[2]=14;
data->T2[3]=17;
data->T2[4]=3;
data->T2[5]=36;
data->T2[6]=5;
data->T2[7]=11;
data->T2[8]=40;
data->T2[9]=36;
data->T2[10]=24;
data->T2[11]=4;
data->T2[12]=9;
data->T2[13]=-842150451;
data->T2[14]=-842150451;

data->g[0]=0;
data->g[1]=0;
data->g[2]=0;
data->g[3]=10;
data->g[4]=0;
data->g[5]=0;
data->g[6]=0;
data->g[7]=0;
data->g[8]=0;
data->g[9]=0;
data->g[10]=13;
data->g[11]=0;
data->g[12]=0;
data->g[13]=8;
data->g[14]=0;
data->g[15]=11;
data->g[16]=0;
data->g[17]=0;
data->g[18]=9;
data->g[19]=0;
data->g[20]=0;
data->g[21]=6;
data->g[22]=0;
data->g[23]=0;
data->g[24]=8;
data->g[25]=0;
data->g[26]=12;
data->g[27]=0;
data->g[28]=13;
data->g[29]=8;
data->g[30]=10;
data->g[31]=1;
data->g[32]=0;
data->g[33]=0;
data->g[34]=0;
data->g[35]=0;
data->g[36]=6;
data->g[37]=0;
data->g[38]=0;
data->g[39]=0;
data->g[40]=0;
data->g[41]=2;
data->g[42]=0;
data->g[43]=0;
data->g[44]=0;


data=&hashTabs[8];
InitHashTab(data,45,15);
data->keys[0]=(char *)malloc(sizeof(char) * 11);
strcpy(data->keys[0],"text_color");
data->keys[1]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[1],"text");
data->keys[2]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[2],"font");
data->keys[3]=(char *)malloc(sizeof(char) * 12);
strcpy(data->keys[3],"borderColor");
data->keys[4]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[4],"border");
data->keys[5]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[5],"color");
data->keys[6]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[6],"root");
data->keys[7]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[7],"parent");
data->keys[8]=(char *)malloc(sizeof(char) * 9);
strcpy(data->keys[8],"children");
data->keys[9]=(char *)malloc(sizeof(char) * 14);
strcpy(data->keys[9],"childrenCount");
data->keys[10]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[10],"flags");
data->keys[11]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[11],"x");
data->keys[12]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[12],"y");
data->keys[13]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[13],"width");
data->keys[14]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[14],"height");

data->T1[0]=8;
data->T1[1]=3;
data->T1[2]=15;
data->T1[3]=37;
data->T1[4]=38;
data->T1[5]=33;
data->T1[6]=32;
data->T1[7]=0;
data->T1[8]=43;
data->T1[9]=44;
data->T1[10]=35;
data->T1[11]=35;
data->T1[12]=4;
data->T1[13]=-842150451;
data->T1[14]=-842150451;

data->T2[0]=19;
data->T2[1]=38;
data->T2[2]=8;
data->T2[3]=17;
data->T2[4]=43;
data->T2[5]=28;
data->T2[6]=36;
data->T2[7]=2;
data->T2[8]=19;
data->T2[9]=11;
data->T2[10]=36;
data->T2[11]=29;
data->T2[12]=11;
data->T2[13]=-842150451;
data->T2[14]=-842150451;

data->g[0]=0;
data->g[1]=0;
data->g[2]=0;
data->g[3]=0;
data->g[4]=0;
data->g[5]=0;
data->g[6]=0;
data->g[7]=0;
data->g[8]=0;
data->g[9]=0;
data->g[10]=0;
data->g[11]=0;
data->g[12]=8;
data->g[13]=0;
data->g[14]=0;
data->g[15]=0;
data->g[16]=0;
data->g[17]=0;
data->g[18]=0;
data->g[19]=6;
data->g[20]=0;
data->g[21]=10;
data->g[22]=0;
data->g[23]=12;
data->g[24]=0;
data->g[25]=0;
data->g[26]=2;
data->g[27]=5;
data->g[28]=9;
data->g[29]=0;
data->g[30]=11;
data->g[31]=0;
data->g[32]=0;
data->g[33]=10;
data->g[34]=0;
data->g[35]=0;
data->g[36]=14;
data->g[37]=0;
data->g[38]=0;
data->g[39]=0;
data->g[40]=13;
data->g[41]=7;
data->g[42]=14;
data->g[43]=0;
data->g[44]=3;


data=&hashTabs[9];
InitHashTab(data,31,10);
data->keys[0]=(char *)malloc(sizeof(char) * 4);
strcpy(data->keys[0],"img");
data->keys[1]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[1],"root");
data->keys[2]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[2],"parent");
data->keys[3]=(char *)malloc(sizeof(char) * 9);
strcpy(data->keys[3],"children");
data->keys[4]=(char *)malloc(sizeof(char) * 14);
strcpy(data->keys[4],"childrenCount");
data->keys[5]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[5],"flags");
data->keys[6]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[6],"x");
data->keys[7]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[7],"y");
data->keys[8]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[8],"width");
data->keys[9]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[9],"height");

data->T1[0]=9;
data->T1[1]=28;
data->T1[2]=7;
data->T1[3]=29;
data->T1[4]=19;
data->T1[5]=5;
data->T1[6]=11;
data->T1[7]=4;
data->T1[8]=27;
data->T1[9]=23;

data->T2[0]=20;
data->T2[1]=29;
data->T2[2]=7;
data->T2[3]=28;
data->T2[4]=28;
data->T2[5]=10;
data->T2[6]=14;
data->T2[7]=18;
data->T2[8]=1;
data->T2[9]=24;

data->g[0]=0;
data->g[1]=0;
data->g[2]=4;
data->g[3]=0;
data->g[4]=3;
data->g[5]=0;
data->g[6]=0;
data->g[7]=0;
data->g[8]=0;
data->g[9]=8;
data->g[10]=0;
data->g[11]=0;
data->g[12]=0;
data->g[13]=0;
data->g[14]=0;
data->g[15]=0;
data->g[16]=0;
data->g[17]=0;
data->g[18]=0;
data->g[19]=0;
data->g[20]=0;
data->g[21]=8;
data->g[22]=0;
data->g[23]=2;
data->g[24]=0;
data->g[25]=0;
data->g[26]=6;
data->g[27]=0;
data->g[28]=5;
data->g[29]=1;
data->g[30]=0;


data=&hashTabs[10];
InitHashTab(data,42,14);
data->keys[0]=(char *)malloc(sizeof(char) * 11);
strcpy(data->keys[0],"leftBorder");
data->keys[1]=(char *)malloc(sizeof(char) * 13);
strcpy(data->keys[1],"bottomBorder");
data->keys[2]=(char *)malloc(sizeof(char) * 12);
strcpy(data->keys[2],"rightBorder");
data->keys[3]=(char *)malloc(sizeof(char) * 10);
strcpy(data->keys[3],"topBorder");
data->keys[4]=(char *)malloc(sizeof(char) * 4);
strcpy(data->keys[4],"img");
data->keys[5]=(char *)malloc(sizeof(char) * 5);
strcpy(data->keys[5],"root");
data->keys[6]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[6],"parent");
data->keys[7]=(char *)malloc(sizeof(char) * 9);
strcpy(data->keys[7],"children");
data->keys[8]=(char *)malloc(sizeof(char) * 14);
strcpy(data->keys[8],"childrenCount");
data->keys[9]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[9],"flags");
data->keys[10]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[10],"x");
data->keys[11]=(char *)malloc(sizeof(char) * 2);
strcpy(data->keys[11],"y");
data->keys[12]=(char *)malloc(sizeof(char) * 6);
strcpy(data->keys[12],"width");
data->keys[13]=(char *)malloc(sizeof(char) * 7);
strcpy(data->keys[13],"height");

data->T1[0]=30;
data->T1[1]=38;
data->T1[2]=33;
data->T1[3]=5;
data->T1[4]=20;
data->T1[5]=27;
data->T1[6]=10;
data->T1[7]=17;
data->T1[8]=27;
data->T1[9]=2;
data->T1[10]=36;
data->T1[11]=32;
data->T1[12]=17;
data->T1[13]=-842150451;

data->T2[0]=14;
data->T2[1]=24;
data->T2[2]=25;
data->T2[3]=24;
data->T2[4]=18;
data->T2[5]=7;
data->T2[6]=35;
data->T2[7]=28;
data->T2[8]=27;
data->T2[9]=30;
data->T2[10]=23;
data->T2[11]=40;
data->T2[12]=38;
data->T2[13]=-842150451;

data->g[0]=0;
data->g[1]=0;
data->g[2]=0;
data->g[3]=0;
data->g[4]=0;
data->g[5]=0;
data->g[6]=8;
data->g[7]=0;
data->g[8]=0;
data->g[9]=0;
data->g[10]=8;
data->g[11]=3;
data->g[12]=0;
data->g[13]=0;
data->g[14]=0;
data->g[15]=0;
data->g[16]=0;
data->g[17]=0;
data->g[18]=11;
data->g[19]=0;
data->g[20]=0;
data->g[21]=0;
data->g[22]=6;
data->g[23]=1;
data->g[24]=0;
data->g[25]=3;
data->g[26]=0;
data->g[27]=7;
data->g[28]=0;
data->g[29]=0;
data->g[30]=10;
data->g[31]=0;
data->g[32]=4;
data->g[33]=10;
data->g[34]=6;
data->g[35]=0;
data->g[36]=0;
data->g[37]=9;
data->g[38]=12;
data->g[39]=0;
data->g[40]=0;
data->g[41]=0;


}

